---------------------------------------------------------------------------
4. Joins
---------------------------------------------------------------------------

SELECT
    *
FROM
    orders
INNER JOIN order_items ON
    order_items.order_id = orders.order_id
ORDER BY
    order_date DESC;

SELECT
  name AS customer_name,
  order_id,
  order_date,
  item_id,
  quantity,
  unit_price
FROM
  orders
INNER JOIN order_items USING(order_id)
INNER JOIN customers USING(customer_id)
ORDER BY
  order_date DESC,
  order_id DESC,
  item_id ASC;

The following example illustrates how to join four tables: orders,  order_items, 
customers, and products.

SELECT
	name AS customer_name,
	order_id,
	order_date,
	item_id,
	product_name,
	quantity,
	unit_price
FROM
	orders
INNER JOIN order_items
		USING(order_id)
INNER JOIN customers
		USING(customer_id)
INNER JOIN products
		USING(product_id)
ORDER BY
	order_date DESC,
	order_id DESC,
	item_id ASC;

------------ LEFT

SELECT
    order_id,
    status,
    employee_id,
    last_name
FROM
    orders
LEFT JOIN employees ON
    employee_id = salesman_id
WHERE
    order_id = 58;

-------------- RIGHT 

SELECT
    first_name,
    last_name,
    order_id,
    status
FROM
    orders
RIGHT JOIN employees ON
    employee_id = salesman_id
WHERE
    job_title = 'Sales Representative'
ORDER BY
    first_name,
    last_name;

-------------------- CROSS JOIN

When you perform a cross join of two tables, which have no relationship, 
you will get a Cartesian product of rows and columns of both tables.

The cross join is useful when you want to generate plenty of rows for testing. 
Suppose we have two tables that have m and n rows, the Cartesian product of these 
tables has m x n rows.

Each row in the inventories table requires data for product_id, warehouse_id, and quantity.

To generate the test data for insertion into the inventories table, 
you can use the CROSS JOIN clause as shown in the following statement:

SELECT
    product_id,
    warehouse_id,
    ROUND( dbms_random.value( 10, 100 )) quantity
FROM
    products 
CROSS JOIN warehouses;